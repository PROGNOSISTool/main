PROPERTY,CATEGORY
A QUIC endpoint MUST NOT reuse a stream ID within a connection.,Potentially Synthesised Model
Endpoints MUST be able to deliver stream data to an application as an ordered byte-stream.,Internal Event (reordering)
The data at a given offset MUST NOT change if it is sent multiple times; an endpoint MAY treat receipt of different data at the same offset within a stream as a connection error of type PROTOCOL_VIOLATION.,Potentially Synthesised Model
An endpoint MUST NOT send data on any stream without ensuring that it is within the flow control limits set by its peer.,Internal Event with potential external aspect.
There are certain operations that an application MUST be able to perform when interacting with QUIC streams.,Internal Event
"This document does not specify an API, but any implementation of this version of QUIC MUST expose the ability to perform the operations described in this section on a QUIC stream.",Internal Event
An endpoint MUST open streams of the same type in increasing order of stream ID.,Potentially Synthesised Model
"Before a stream is created, all streams of the same type with lower- numbered stream IDs MUST be created.",Potentially Synthesised Model
"A sender MUST NOT send any of these frames (STREAM, STREAM_DATA_BLOCKED, RESET_STREAM) from a terminal state (""Data Recvd"" or ""Reset Recvd"").",Learned Model
"A sender MUST NOT send a STREAM or STREAM_DATA_BLOCKED frame for a stream in the ""Reset Sent"" state or any terminal state, that is, after sending a RESET_STREAM frame.",Learned Model
An endpoint that receives a STOP_SENDING frame MUST send a RESET_STREAM frame if the stream is in the Ready or Send state.,Learned Model
"If the STOP_SENDING frame is received on a stream that is already in the ""Data Sent"" state, an endpoint that wishes to cease retransmission of previously-sent STREAM frames on that stream MUST first send a RESET_STREAM frame.",Learned Model
"A receiver MUST close the connection with a FLOW_CONTROL_ERROR error (<a href=""#section-11"">Section 11</a>) if the sender violates the advertised connection or stream data limits.",Potentially Synthesised Model
A sender MUST ignore any MAX_STREAM_DATA or MAX_DATA frames that do not increase flow control limits.,Potentially Synthesised Model
"Therefore, a receiver MUST NOT wait for a STREAM_DATA_BLOCKED or DATA_BLOCKED frame before sending a MAX_STREAM_DATA or MAX_DATA frame; doing so could result in the sender being blocked for the rest of the connection.",Internal Event with potential external aspect.
"On receiving a RESET_STREAM frame, a receiver definitively knows how many bytes were sent on that stream before the RESET_STREAM frame, and the receiver MUST use the final size of the stream to account for all bytes sent on the stream in its connection level flow controller.<span class=""grey"">Iyengar &amp; Thomson   Expires 12 December 2020     [Page 25]</pre><hr class='noprint'/><!--NewPage--><pre class='newpage'><span id=""page-26"" ><span class=""grey"">Internet-Draft     QUIC Transport Protocol     June 2020 RESET_STREAM terminates one direction of a stream abruptly.",Internal Event
"Both endpoints MUST maintain flow control state for the stream in the unterminated direction until that direction enters a terminal state, or until one of the endpoints sends CONNECTION_CLOSE.<span class=""h3""><a class=""selflink"" id=""section-4.4"" href=""#section-4.4"">4.4</a>.",Internal Event
An endpoint MUST NOT send data on a stream at or beyond the final size.,Potentially Synthesised Model
If a max_streams transport parameter or MAX_STREAMS frame is received with a value greater than 2^60 the connection MUST be closed immediately with a connection error of type STREAM_LIMIT_ERROR,Potentially Synthesised Model
Endpoints MUST NOT exceed the limit set by their peer. An endpoint that receives a frame with a stream ID exceeding the limit it has sent MUST treat this as a connection error of type STREAM_LIMIT_ERROR.,Potentially Synthesised Model
A receiver MUST ignore any MAX_STREAMS frame that does not increase the stream limit.,Potentially Synthesised Model
"An endpoint MUST NOT wait to receive this signal before advertising additional credit, since doing so will mean that the peer will be blocked for at least an entire round trip, and potentially for longer if the peer chooses to not send STREAMS_BLOCKED frames.<span class=""h2""><a class=""selflink"" id=""section-5"" href=""#section-5"">5</a>.",Internal Event with potential external aspect.
"Connection IDs MUST NOT contain any information that can be used by an external observer (that is, one that does not cooperate with the issuer) to correlate them with other connection IDs for the same connection.",Internal Event with potential external aspect.
"As a trivial example, this means the same connection ID MUST NOT be issued more than once on the same connection.",Potentially Synthesised Model
"However, multiplexing connections on the same local IP address and port while using zero- length connection IDs will cause failures in the presence of peer connection migration, NAT rebinding, and client port reuse; and therefore MUST NOT be done unless an endpoint is certain that those protocol features are not in use. When an endpoint uses a non-zero-length connection ID, it needs to ensure that the peer has a supply of connection IDs from which to choose for packets sent to the endpoint.",Internal Event
The sequence number on each newly-issued connection ID MUST increase by 1.,Potentially Synthesised Model
"When an endpoint issues a connection ID, it MUST accept packets that carry this connection ID for the duration of the connection or until its peer invalidates the connection ID via a RETIRE_CONNECTION_ID frame (<a href=""#section-19.16"">Section 19.16</a>).",Potentially Synthesised Model
An endpoint MUST NOT provide more connection IDs than the peer&#x27;s limit.,Potentially Synthesised Model
"After processing a NEW_CONNECTION_ID frame and adding and retiring active connection IDs, if the number of active connection IDs exceeds the value advertised in its active_connection_id_limit transport parameter, an endpoint MUST close the connection with an error of type CONNECTION_ID_LIMIT_ERROR.",Potentially Synthesised Model
"Upon receipt of an increased Retire Prior To field, the peer MUST stop using the corresponding connection IDs and retire them with RETIRE_CONNECTION_ID frames before adding the newly provided connection ID to the set of active connection IDs.",Potentially Synthesised Model
"An endpoint MUST NOT forget a connection ID without retiring it, though it MAY choose to treat having connection IDs in need of retirement that exceed this limit as a connection error of type CONNECTION_ID_LIMIT_ERROR.",Internal Event with potential external aspect.
"An endpoint MUST generate a connection error if it commits changes to state before discovering an error.<span class=""h4""><a class=""selflink"" id=""section-5.2.1"" href=""#section-5.2.1"">5.2.1</a>.",Internal Event
"If a client receives a packet that has an unsupported version, it MUST discard that packet.<span class=""h4""><a class=""selflink"" id=""section-5.2.2"" href=""#section-5.2.2"">5.2.2</a>.",Learned Model
Servers MUST drop smaller packets that specify unsupported versions.,Learned Model
"   If a server receives a packet that indicates an unsupported version but is large enough to initiate a new connection for any one supported version, the server SHOULD send a Version Negotiation packet. Servers MAY limit the number of packets that it responds to with a Version Negotiation packet. Servers MUST drop smaller packets that specify unsupported versions. The first packet for an unsupported version can use different semantics and encodings for any version-specific field.  In particular, different packet protection keys might be used for different versions.  Servers that do not support a particular version are unlikely to be able to decrypt the payload of the packet. Servers SHOULD NOT attempt to decode or decrypt a packet from an unknown version, but instead send a Version Negotiation packet, provided that the packet is sufficiently long. Packets with a supported version, or no version field, are matched to a connection using the connection ID or - for packets with zero-length connection IDs - the local address and port.  If the packet doesnâ€™t match an existing connection, the server continues below. If the packet is an Initial packet fully conforming with the specification, the server proceeds with the handshake (Section 7). This commits the server to the version that the client selected. If a server refuses to accept a new connection, it SHOULD send an Initial packet containing a CONNECTION_CLOSE frame with error code CONNECTION_REFUSED. If the packet is a 0-RTT packet, the server MAY buffer a limited number of these packets in anticipation of a late-arriving Initial packet.  Clients are not able to send Handshake packets prior to receiving a server response, so servers SHOULD ignore any such packets. Servers MUST drop incoming packets under all other circumstances.",Potentially Synthesised Model
An endpoint MUST NOT send a Version Negotiation packet in response to receiving a Version Negotiation packet.,Learned Model
"A client that supports only this version of QUIC MUST abandon the current connection attempt if it receives a Version Negotiation packet, with the following two exceptions.",Potentially Synthesised Model
"A client MUST discard any Version Negotiation packet if it has received and successfully processed any other packet, including an earlier Version Negotiation packet.",Potentially Synthesised Model
A client MUST discard a Version Negotiation packet that lists the QUIC version selected by the client.,Potentially Synthesised Model
The client MUST check that the Destination and Source Connection ID fields match the Source and Destination Connection ID fields in a packet that the client sent.,Potentially Synthesised Model
"If this check fails, the packet MUST be discarded.",Potentially Synthesised Model
The new connection MUST use a new random Destination Connection ID different from the one it had previously sent.,
"The cryptographic handshake MUST provide the following properties: *  authenticated key exchange, where  -  a server is always authenticated,  -  a client is optionally authenticated,  -  every connection produces distinct and unrelated keys,  -  keying material is usable for packet protection for both 0-RTT   and 1-RTT packets, and  -  1-RTT keys have forward secrecy *  authenticated values for transport parameters of both endpoints,  and confidentiality protection for server transport parameters  (see <a href=""#section-7.4"">Section 7.4</a>) *  authenticated negotiation of an application protocol (TLS uses  ALPN [<a href=""/doc/html/rfc7301"" title=""""Transport Layer Security (TLS) Application-Layer Protocol Negotiation Extension"""">RFC7301</a>] for this purpose) An endpoint can verify support for Explicit Congestion Notification (ECN) in the first packets it sends, as described in <a href=""#section-13.4.2"">Section 13.4.2</a>.",Out of scope â€“ Cryptography
Endpoints MUST explicitly negotiate an application protocol.,Learned Model
This Destination Connection ID MUST be at least 8 bytes in length.,Potentially Synthesised Model
"Until a packet is received from the server, the client MUST use the same Destination Connection ID value on all packets in this connection.",Potentially Synthesised Model
"Once a client has received a valid Initial packet from the server, it MUST discard any subsequent packet it receives with a different Source Connection ID.",Potentially Synthesised Model
A client MUST change the Destination Connection ID it uses for sending packets in response to only the first received Initial or Retry packet.,Potentially Synthesised Model
A server MUST set the Destination Connection ID it uses for sending packets based on the first received Initial packet.,Potentially Synthesised Model
"Any further changes to the Destination Connection ID are only permitted if the values are taken from any received NEW_CONNECTION_ID frames; if subsequent Initial packets include a different Source Connection ID, they MUST be discarded.",Potentially Synthesised Model
"If it sends a Retry packet, a server also includes the Source Connection ID field from the Retry packet in the retry_source_connection_id transport parameter.<span class=""grey"">Iyengar &amp; Thomson   Expires 12 December 2020     [Page 41]</pre><hr class='noprint'/><!--NewPage--><pre class='newpage'><span id=""page-42"" ><span class=""grey"">Internet-Draft     QUIC Transport Protocol     June 2020 The values provided by a peer for these transport parameters MUST match the values that an endpoint used in the Destination and Source Connection ID fields of Initial packets that it sent.",
An endpoint MUST treat absence of the initial_source_connection_id transport parameter from either endpoint or absence of the original_destination_connection_id transport parameter from the server as a connection error of type TRANSPORT_PARAMETER_ERROR.,
"An endpoint MUST treat the following as a connection error of type TRANSPORT_PARAMETER_ERROR or PROTOCOL_VIOLATION: *  absence of the retry_source_connection_id transport parameter from  the server after receiving a Retry packet, *  presence of the retry_source_connection_id transport parameter  when no Retry packet was received, or *  a mismatch between values received from a peer in these transport  parameters and the value sent in the corresponding Destination or  Source Connection ID fields of Initial packets.",
An endpoint MUST treat receipt of a transport parameter with an invalid value as a connection error of type TRANSPORT_PARAMETER_ERROR.,
An endpoint MUST NOT send a parameter more than once in a given transport parameters extension.,
"The definition of new transport parameters (<a href=""#section-7.4.2"">Section 7.4.2</a>) MUST specify whether they MUST, MAY, or MUST NOT be stored for 0-RTT.",
"A client MUST NOT use remembered values for the following parameters: ack_delay_exponent, max_ack_delay, initial_source_connection_id, original_destination_connection_id, preferred_address, retry_source_connection_id, and stateless_reset_token.",
"The client MUST use the server&#x27;s new values in the handshake instead, and absent new values from the server, the default value.",
A client that attempts to send 0-RTT data MUST remember all other transport parameters used by the server.,
"A server uses the transport parameters in determining whether to accept 0-RTT data.<span class=""grey"">Iyengar &amp; Thomson   Expires 12 December 2020     [Page 44]</pre><hr class='noprint'/><!--NewPage--><pre class='newpage'><span id=""page-45"" ><span class=""grey"">Internet-Draft     QUIC Transport Protocol     June 2020 If 0-RTT data is accepted by the server, the server MUST NOT reduce any limits or alter any values that might be violated by the client with its 0-RTT data.",
"In particular, a server that accepts 0-RTT data MUST NOT set values for the following parameters (<a href=""#section-18.2"">Section 18.2</a>) that are smaller than the remembered value of the parameters.",
A server MUST either reject 0-RTT data or abort a handshake if the implied values for transport parameters cannot be supported.,
"When sending frames in 0-RTT packets, a client MUST only use remembered transport parameters; importantly, it MUST NOT use updated values that it learns from the server&#x27;s updated transport parameters or from frames received in 1-RTT packets.",
An endpoint MUST ignore transport parameters that it does not support.,
Implementations MUST support buffering at least 4096 bytes of data received in out of order CRYPTO frames.,
"If an endpoint does not expand its buffer, it MUST close the connection with a CRYPTO_BUFFER_EXCEEDED error code.",
"Packets containing discarded CRYPTO frames MUST be acknowledged because the packet has been received and processed by the transport even though the CRYPTO frame was discarded.<span class=""h2""><a class=""selflink"" id=""section-8"" href=""#section-8"">8</a>.",
"Prior to validating the client address, servers MUST NOT send more than three times as many bytes as the number of bytes they have received.",
"For the purposes of avoiding amplification prior to address validation, servers MUST count all of the payload bytes received in datagrams that are uniquely attributed to a single connection.",
"Clients MUST ensure that UDP datagrams containing Initial packets have UDP payloads of at least 1200 bytes, adding padding to packets in the datagram as necessary.",
"To prevent this deadlock, clients MUST send a packet on a probe timeout (PTO, see Section 6.2 of [<a href=""#ref-QUIC-RECOVERY"">QUIC-RECOVERY</a>]).",
"Specifically, the client MUST send an Initial packet in a UDP datagram that contains at least 1200 bytes if it does not have Handshake keys, and otherwise send a Handshake packet.<span class=""grey"">Iyengar &amp; Thomson   Expires 12 December 2020     [Page 47]</pre><hr class='noprint'/><!--NewPage--><pre class='newpage'><span id=""page-48"" ><span class=""grey"">Internet-Draft     QUIC Transport Protocol     June 2020 A server might wish to validate the client address before starting the cryptographic handshake.",
Token Construction A token sent in a NEW_TOKEN frames or a Retry packet MUST be constructed in a way that allows the server to identify how it was provided to a client.,
This token MUST be repeated by the client in all Initial packets it sends for that connection after it receives the Retry packet.,
"The client MUST include the token in all Initial packets it sends, unless a Retry replaces the token with a newer one.",
The client MUST NOT use the token provided in a Retry for future connections.,
"A server can store the expiration time or include it in an encrypted form in the token.<span class=""grey"">Iyengar &amp; Thomson   Expires 12 December 2020     [Page 49]</pre><hr class='noprint'/><!--NewPage--><pre class='newpage'><span id=""page-50"" ><span class=""grey"">Internet-Draft     QUIC Transport Protocol     June 2020 A token issued with NEW_TOKEN MUST NOT include information that would allow values to be linked by an observer to the connection on which it was issued, unless the values are encrypted.",
"A server MUST ensure that every NEW_TOKEN frame it sends is unique across all clients, with the exception of those sent to repair losses of previously sent NEW_TOKEN frames.",
"A client MUST NOT include a token that is not applicable to the server that it is connecting to, unless the client has the knowledge that the server that issued the token and the server the client is connecting to are jointly managing the tokens.",
"In comparison, a token obtained in a Retry packet MUST be used immediately during the connection attempt and cannot be used in subsequent connection attempts.",
"Though saving and using older tokens has no negative consequences, clients can regard older tokens as being less likely be useful to the server for address validation.<span class=""grey"">Iyengar &amp; Thomson   Expires 12 December 2020     [Page 50]</pre><hr class='noprint'/><!--NewPage--><pre class='newpage'><span id=""page-51"" ><span class=""grey"">Internet-Draft     QUIC Transport Protocol     June 2020 When a server receives an Initial packet with an address validation token, it MUST attempt to validate the token, unless it has already completed address validation.",
Address Validation Token Integrity An address validation token MUST be difficult to guess.,
"For this design to work, the token MUST be covered by integrity protection against modification or falsification by clients.",
Tokens sent in NEW_TOKEN frames MUST include information that allows the server to verify that the client IP address has not changed from when the token was issued.,
"If the client IP address has changed, the server MUST adhere to the anti-amplification limits found in <a href=""#section-8.1"">Section 8.1</a>.",
Servers MUST ensure that replay of tokens is prevented or limited.,
"The endpoint MUST use unpredictable data in every PATH_CHALLENGE frame so that it can associate the peer&#x27;s response with the corresponding PATH_CHALLENGE.<span class=""h3""><a class=""selflink"" id=""section-8.4"" href=""#section-8.4"">8.4</a>.",
"Path Validation Responses On receiving a PATH_CHALLENGE frame, an endpoint MUST respond immediately by echoing the data contained in the PATH_CHALLENGE frame in a PATH_RESPONSE frame.",
"An endpoint MUST NOT send more than one PATH_RESPONSE frame in response to one PATH_CHALLENGE frame; see <a href=""#section-13.3"">Section 13.3</a>.",
"An endpoint MUST NOT initiate connection migration before the handshake is confirmed, as defined in section 4.1.2 of [<a href=""#ref-QUIC-TLS"" title=""""Using Transport Layer Security (TLS) to Secure QUIC"""">QUIC-TLS</a>].",
"If the peer sent the disable_active_migration transport parameter, an endpoint also MUST NOT send packets (including probing packets; see <a href=""#section-9.1"">Section 9.1</a>) from a different local address to the address the peer used during the handshake.",
"An endpoint that has sent this transport parameter, but detects that a peer has nonetheless migrated to a different remote address MUST either drop the incoming packets on that path without generating a stateless reset or proceed with path validation and allow the peer to migrate.",
"An endpoint MUST perform path validation (<a href=""#section-8.2"">Section 8.2</a>) if it detects any change to a peer&#x27;s address, unless it has previously validated that address.",
"If a client receives packets from an unknown server address, the client MUST discard these packets.<span class=""h3""><a class=""selflink"" id=""section-9.1"" href=""#section-9.1"">9.1</a>.",
"Responding to Connection Migration Receiving a packet from a new peer address containing a non-probing frame indicates that the peer has migrated to that address.<span class=""grey"">Iyengar &amp; Thomson   Expires 12 December 2020     [Page 56]</pre><hr class='noprint'/><!--NewPage--><pre class='newpage'><span id=""page-57"" ><span class=""grey"">Internet-Draft     QUIC Transport Protocol     June 2020 In response to such a packet, an endpoint MUST start sending subsequent packets to the new peer address and MUST initiate path validation (<a href=""#section-8.2"">Section 8.2</a>) to verify the peer&#x27;s ownership of the unvalidated address.",
"An endpoint MAY send data to an unvalidated peer address, but it MUST protect against potential attacks as described in <a href=""#section-9.3.1"">Section 9.3.1</a> and <a href=""#section-9.3.2"">Section 9.3.2</a>.",
"Until a peer&#x27;s address is deemed valid, an endpoint MUST limit the rate at which it sends data to this address.",
"The endpoint MUST NOT send more than a minimum congestion window&#x27;s worth of data per estimated round-trip time (kMinimumWindow, as defined in [<a href=""#ref-QUIC-RECOVERY"">QUIC-RECOVERY</a>]).",
"To protect the connection from failing due to such a spurious migration, an endpoint MUST revert to using the last validated peer address when validation of a new peer address fails.",
"If an endpoint has no state about the last validated peer address, it MUST close the connection silently by discarding all connection state.",
"In response to an apparent migration, endpoints MUST validate the previously active path using a PATH_CHALLENGE frame.",
"Packets sent on the old path MUST NOT contribute to congestion control or RTT estimation for the new path.<span class=""grey"">Iyengar &amp; Thomson   Expires 12 December 2020     [Page 59]</pre><hr class='noprint'/><!--NewPage--><pre class='newpage'><span id=""page-60"" ><span class=""grey"">Internet-Draft     QUIC Transport Protocol     June 2020 On confirming a peer&#x27;s ownership of its new address, an endpoint MUST immediately reset the congestion controller and round-trip time estimator for the new path to initial values (see Sections A.3 and B.3 in [<a href=""#ref-QUIC-RECOVERY"">QUIC-RECOVERY</a>]) unless it has knowledge that a previous send rate or round-trip time estimate is valid for the new path.",
"This timer SHOULD be set as described in Section 6.2.1 of [<a href=""#ref-QUIC-RECOVERY"">QUIC-RECOVERY</a>] and MUST NOT be more aggressive.<span class=""h3""><a class=""selflink"" id=""section-9.5"" href=""#section-9.5"">9.5</a>.",
"An endpoint MUST NOT reuse a connection ID when sending from more than one local address, for example when initiating connection migration as described in <a href=""#section-9.2"">Section 9.2</a> or when probing a new network path as described in <a href=""#section-9.1"">Section 9.1</a>.",
"Similarly, an endpoint MUST NOT reuse a connection ID when sending to more than one destination address.",
"If path validation fails, the client MUST continue sending all future packets to the server&#x27;s original IP address.<span class=""h4""><a class=""selflink"" id=""section-9.6.2"" href=""#section-9.6.2"">9.6.2</a>.",
The server MUST send other non-probing frames from its original address until it receives a non-probing packet from the client at its preferred address and until the server has validated the new path.,
The server MUST probe on the path toward the client from its preferred address.,
"A client MUST NOT use these for other connections, including connections that are resumed from the current connection.<span class=""h4""><a class=""selflink"" id=""section-9.6.3"" href=""#section-9.6.3"">9.6.3</a>.",
"If path validation of the server&#x27;s preferred address succeeds, the client MUST abandon validation of the original address and migrate to using the server&#x27;s preferred address.",
"If path validation of the server&#x27;s preferred address fails but validation of the server&#x27;s original address succeeds, the client MAY migrate to its new address and continue sending to the server&#x27;s original address.<span class=""grey"">Iyengar &amp; Thomson   Expires 12 December 2020     [Page 63]</pre><hr class='noprint'/><!--NewPage--><pre class='newpage'><span id=""page-64"" ><span class=""grey"">Internet-Draft     QUIC Transport Protocol     June 2020 If the connection to the server&#x27;s preferred address is not from the same client address, the server MUST protect against potential attacks as described in <a href=""#section-9.3.1"">Section 9.3.1</a> and <a href=""#section-9.3.2"">Section 9.3.2</a>.",
Servers MUST NOT send more than a minimum congestion window&#x27;s worth of non-probing packets to the new address before path validation is complete.,
"The flow label generation MUST be designed to minimize the chances of linkability with a previously used flow label, as this would enable correlating activity on multiple paths; see <a href=""#section-9.5"">Section 9.5</a>.",
"While closing, an endpoint MUST NOT send packets unless they contain a CONNECTION_CLOSE frame; see <a href=""#section-10.3"">Section 10.3</a> for details.",
"While otherwise identical to the closing state, an endpoint in the draining state MUST NOT send any packets.",
"An endpoint in the closing state MUST strictly limit the number of packets it sends to this new address until the address is validated; see <a href=""#section-8.2"">Section 8.2</a>.",
"To avoid creating an unwitting amplification attack, such endpoints MUST reduce the frequency with which it sends packets containing a CONNECTION_CLOSE frame.",
"To avoid this, endpoints MUST either limit transmission of CONNECTION_CLOSE frames to validated addresses or drop packets without response if the response would be more than three times larger than the received packet.",
"An endpoint MUST NOT send further packets, which could result in a constant exchange of CONNECTION_CLOSE frames until the closing period on either peer ended.",
"After the handshake is confirmed (see Section 4.1.2 of [<a href=""#ref-QUIC-TLS"" title=""""Using Transport Layer Security (TLS) to Secure QUIC"""">QUIC-TLS</a>]), an endpoint MUST send any CONNECTION_CLOSE frames in a 1-RTT packet.",
A CONNECTION_CLOSE of type 0x1d MUST be replaced by a CONNECTION_CLOSE of type 0x1c when sending the frame in Initial or Handshake packets.,
Endpoints MUST clear the value of the Reason Phrase field and SHOULD use the APPLICATION_ERROR code when converting to a CONNECTION_CLOSE of type 0x1c.,
An endpoint that wishes to communicate a fatal connection error MUST use a CONNECTION_CLOSE frame if it has sufficient state to do so.,
An endpoint MUST NOT send a stateless reset that is three times or more larger than the packet it receives to avoid being used for amplification.,
Endpoints MUST discard packets that are too small to be valid QUIC packets.,
Endpoints MUST send stateless reset packets formatted as a packet with a short header.,
"However, endpoints MUST treat any packet ending in a valid stateless reset token as a stateless reset, as other QUIC versions might allow the use of a long header.<span class=""grey"">Iyengar &amp; Thomson   Expires 12 December 2020     [Page 71]</pre><hr class='noprint'/><!--NewPage--><pre class='newpage'><span id=""page-72"" ><span class=""grey"">Internet-Draft     QUIC Transport Protocol     June 2020 An endpoint MAY send a stateless reset in response to a packet with a long header.",
"However, the comparison MUST be performed when the first packet in an incoming datagram either cannot be associated with a connection, or cannot be decrypted.",
An endpoint MUST NOT check for any Stateless Reset Tokens associated with connection IDs it has not used or for connection IDs that have been retired.,
"When comparing a datagram to Stateless Reset Token values, endpoints MUST perform the comparison without leaking information about the value of the token.",
"If the last 16 bytes of the datagram are identical in value to a Stateless Reset Token, the endpoint MUST enter the draining period and not send any further packets on this connection.<span class=""grey"">Iyengar &amp; Thomson   Expires 12 December 2020     [Page 73]</pre><hr class='noprint'/><!--NewPage--><pre class='newpage'><span id=""page-74"" ><span class=""grey"">Internet-Draft     QUIC Transport Protocol     June 2020<span class=""h4""><a class=""selflink"" id=""section-10.4.2"" href=""#section-10.4.2"">10.4.2</a>.",
Calculating a Stateless Reset Token The stateless reset token MUST be difficult to guess.,
An endpoint that uses this design MUST either use the same connection ID length for all connections or encode the length of the connection ID such that it can be recovered without state.,
This method for choosing the Stateless Reset Token means that the combination of connection ID and static key MUST NOT be used for another connection.,
A connection ID from a connection that is reset by revealing the Stateless Reset Token MUST NOT be reused for new connections at nodes that share a static key.,
The same Stateless Reset Token MUST NOT be used for multiple connection IDs.,
"An endpoint MUST ensure that every Stateless Reset that it sends is smaller than the packet which triggered it, unless it maintains state sufficient to prevent looping.",
"A stateless reset MUST NOT be used by an endpoint that has the state necessary to send a frame on the connection.<span class=""h3""><a class=""selflink"" id=""section-11.1"" href=""#section-11.1"">11.1</a>.",
"Connection Errors Errors that result in the connection being unusable, such as an obvious violation of protocol semantics or corruption of state that affects an entire connection, MUST be signaled using a CONNECTION_CLOSE frame (<a href=""#section-19.19"">Section 19.19</a>).",
RESET_STREAM MUST only be instigated by the application protocol that uses QUIC.,
Receivers MUST be able to process coalesced packets.,
Senders MUST NOT coalesce QUIC packets for different connections into a single UDP datagram.,
"The receiver of coalesced QUIC packets MUST individually process each QUIC packet and separately acknowledge them, as if they were received as the payload of different UDP datagrams.",
"For example, if decryption fails (because the keys are not available or any other reason), the receiver MAY either discard or buffer the packet for later processing and MUST attempt to process the remaining packets.<span class=""grey"">Iyengar &amp; Thomson   Expires 12 December 2020     [Page 78]</pre><hr class='noprint'/><!--NewPage--><pre class='newpage'><span id=""page-79"" ><span class=""grey"">Internet-Draft     QUIC Transport Protocol     June 2020 Retry packets (<a href=""#section-17.2.5"">Section 17.2.5</a>), Version Negotiation packets (<a href=""#section-17.2.1"">Section 17.2.1</a>), and packets with a short header (<a href=""#section-17.3"">Section 17.3</a>) do not contain a Length field and so cannot be followed by other packets in the same UDP datagram.",
"Subsequent packets sent in the same packet number space MUST increase the packet number by at least one.<span class=""grey"">Iyengar &amp; Thomson   Expires 12 December 2020     [Page 79]</pre><hr class='noprint'/><!--NewPage--><pre class='newpage'><span id=""page-80"" ><span class=""grey"">Internet-Draft     QUIC Transport Protocol     June 2020 0-RTT and 1-RTT data exist in the same packet number space to make loss recovery algorithms easier to implement between the two packet types.",
A QUIC endpoint MUST NOT reuse a packet number within the same packet number space in one connection.,
"If the packet number for sending reaches 2^62 - 1, the sender MUST close the connection without sending a CONNECTION_CLOSE frame or any further packets; an endpoint MAY send a Stateless Reset (<a href=""#section-10.4"">Section 10.4</a>) in response to further packets that it receives.",
A receiver MUST discard a newly unprotected packet unless it is certain that it has not processed another packet with the same packet number from the same packet number space.,
"Duplicate suppression MUST happen after removing packet protection for the reasons described in Section 9.3 of [<a href=""#ref-QUIC-TLS"" title=""""Using Transport Layer Security (TLS) to Secure QUIC"""">QUIC-TLS</a>].",
"Packet Payload {   Frame (..) ..., }          Figure 10: QUIC Payload The payload of a packet that contains frames MUST contain at least one frame, and MAY contain multiple frames and multiple frame types.",
An endpoint MUST treat the receipt of a frame of unknown type as a connection error of type FRAME_ENCODING_ERROR.,
"To ensure simple and efficient implementations of frame parsing, a frame type MUST use the shortest possible encoding.",
Packet Processing A packet MUST NOT be acknowledged until packet protection has been successfully removed and all frames contained in the packet have been processed.,
"Sending ACK Frames Every packet SHOULD be acknowledged at least once, and ack-eliciting packets MUST be acknowledged at least once within the maximum ack delay.",
"Since packets containing only ACK frames are not congestion controlled, an endpoint MUST NOT send more than one such packet in response to receiving an ack-eliciting packet.",
"An endpoint MUST NOT send a non-ack-eliciting packet in response to a non-ack-eliciting packet, even if there are packet gaps which precede the received packet.",
"This is necessary if an ACK frame would be too large to fit in a packet, however receivers MAY also limit ACK frame size further to preserve space for other frames.<span class=""grey"">Iyengar &amp; Thomson   Expires 12 December 2020     [Page 87]</pre><hr class='noprint'/><!--NewPage--><pre class='newpage'><span id=""page-88"" ><span class=""grey"">Internet-Draft     QUIC Transport Protocol     June 2020 A receiver MUST retain an ACK Range unless it can ensure that it will not subsequently accept packets with numbers in that range.",
"Receivers can discard all ACK Ranges, but they MUST retain the largest packet number that has been successfully processed as that is used to recover packet numbers from subsequent packets; see <a href=""#section-17.1"">Section 17.1</a>.",
"A receiver MUST NOT bundle an ack-eliciting frame with all packets that would otherwise be non-ack-eliciting, to avoid an infinite feedback loop of acknowledgements.<span class=""h4""><a class=""selflink"" id=""section-13.2.6"" href=""#section-13.2.6"">13.2.6</a>.",
"An endpoint MUST NOT include delays that it does not control when populating the Ack Delay field in an ACK frame.<span class=""h4""><a class=""selflink"" id=""section-13.2.7"" href=""#section-13.2.7"">13.2.7</a>.",
"ACK Frames and Packet Protection ACK frames MUST only be carried in a packet that has the same packet number space as the packet being ACKed; see <a href=""#section-12.1"">Section 12.1</a>.",
"For instance, packets that are protected with 1-RTT keys MUST be acknowledged in packets that are also protected with 1-RTT keys.<span class=""grey"">Iyengar &amp; Thomson   Expires 12 December 2020     [Page 88]</pre><hr class='noprint'/><!--NewPage--><pre class='newpage'><span id=""page-89"" ><span class=""grey"">Internet-Draft     QUIC Transport Protocol     June 2020 Packets that a client sends with 0-RTT packet protection MUST be acknowledged by the server in packets protected by 1-RTT keys.",
The content of a RESET_STREAM frame MUST NOT change when it is  sent again.,
*  The HANDSHAKE_DONE frame MUST be retransmitted until it is  acknowledged.,
"A receiver MUST accept packets containing an outdated frame, such as a MAX_DATA frame carrying a smaller maximum data than one found in an older packet.",
"Upon detecting losses, a sender MUST take appropriate congestion control action.",
"Even if an endpoint does not use ECN markings on packets it transmits, the endpoint MUST provide feedback about ECN markings received from the peer if they are accessible.",
"Receiving ACK Frames An endpoint that sets ECT(0) or ECT(1) codepoints on packets it transmits MUST use the following steps on receiving an ACK frame to validate ECN.<span class=""grey"">Iyengar &amp; Thomson   Expires 12 December 2020     [Page 93]</pre><hr class='noprint'/><!--NewPage--><pre class='newpage'><span id=""page-94"" ><span class=""grey"">Internet-Draft     QUIC Transport Protocol     June 2020 *  If this ACK frame newly acknowledges a packet that the endpoint  sent with either ECT(0) or ECT(1) codepoints set, and if no ECN  feedback is present in the ACK frame, validation fails.",
"*  For validation to succeed, the total increase in ECT(0), ECT(1),  and CE counts MUST be no smaller than the total number of QUIC  packets sent with an ECT codepoint that are newly acknowledged in  this ACK frame.",
"*  Any increase in either ECT(0) or ECT(1) counts, plus any increase  in the CE count, MUST be no smaller than the number of packets  sent with the corresponding ECT codepoint that are newly  acknowledged in this ACK frame.",
"When this happens, and if validation succeeds, the local reference counts MUST be increased to match the counts in the ACK frame.<span class=""h5""><a class=""selflink"" id=""section-13.4.2.3"" href=""#section-13.4.2.3"">13.4.2.3</a>.",
Network routing and path elements can change mid- connection however; an endpoint MUST disable ECN if validation fails at any point in the connection.,
UDP datagrams MUST NOT be fragmented at the IP layer.,
"In IPv4 [<a href=""#ref-IPv4"" title=""""Internet Protocol"""">IPv4</a>], the DF bit MUST be set to prevent fragmentation on the path.<span class=""h3""><a class=""selflink"" id=""section-14.1"" href=""#section-14.1"">14.1</a>.",
"Initial Packet Size A client MUST expand the payload of all UDP datagrams carrying Initial packets to at least the smallest allowed maximum packet size (1200 bytes) by adding PADDING frames to the Initial packet or by coalescing the Initial packet; see <a href=""#section-12.2"">Section 12.2</a>.",
"Datagrams containing Initial packets MAY exceed 1200 bytes if the client believes that the network path and peer both support the size that it chooses.<span class=""grey"">Iyengar &amp; Thomson   Expires 12 December 2020     [Page 95]</pre><hr class='noprint'/><!--NewPage--><pre class='newpage'><span id=""page-96"" ><span class=""grey"">Internet-Draft     QUIC Transport Protocol     June 2020 A server MUST discard an Initial packet that is carried in a UDP datagram with a payload that is less than the smallest allowed maximum packet size of 1200 bytes.",
"The server MUST also limit the number of bytes it sends before validating the address of the client; see <a href=""#section-8"">Section 8</a>.<span class=""h3""><a class=""selflink"" id=""section-14.2"" href=""#section-14.2"">14.2</a>.",
"If a QUIC endpoint determines that the PMTU between any pair of local and remote IP addresses has fallen below the smallest allowed maximum packet size of 1200 bytes, it MUST immediately cease sending QUIC packets, except for those in PMTU probes or those containing CONNECTION_CLOSE frames, on the affected path.",
An endpoint MUST ignore an ICMP message that claims the PMTU has decreased below the minimum QUIC packet size.,
"ICMP message validation MUST include matching IP addresses and UDP ports [<a href=""/doc/html/rfc8085"" title=""""UDP Usage Guidelines"""">RFC8085</a>] and, when possible, connection IDs to an active QUIC session.",
"An endpoint MUST NOT increase PMTU based on ICMP messages; see <a href=""#section-3"">Section 3</a>, clause 6 of [<a href=""#ref-DPLPMTUD"" title=""""Packetization Layer Path MTU Discovery for Datagram Transports"""">DPLPMTUD</a>].",
"The encoded packet number is protected as described in Section 5.4 of [<a href=""#ref-QUIC-TLS"" title=""""Using Transport Layer Security (TLS) to Secure QUIC"""">QUIC-TLS</a>].<span class=""grey"">Iyengar &amp; Thomson   Expires 12 December 2020      [Page 101]</pre><hr class='noprint'/><!--NewPage--><pre class='newpage'><span id=""page-102"" ><span class=""grey"">Internet-Draft     QUIC Transport Protocol     June 2020 The sender MUST use a packet number size able to represent more than twice as large a range than the difference between the largest acknowledged packet and packet number being sent.",
Packets  containing a zero value for this bit are not valid packets in this  version and MUST be discarded.,
"In QUIC version 1, this value MUST NOT exceed  20.",
Endpoints that receive a version 1 long header with a value  larger than 20 MUST drop the packet.,
"In QUIC version 1, this value MUST NOT  exceed 20 bytes.",
Endpoints that receive a version 1 long header  with a value larger than 20 MUST drop the packet.,
The value  included prior to protection MUST be set to 0.,
"An endpoint MUST  treat receipt of a packet that has a non-zero value for these  bits, after removing both packet and header protection, as a  connection error of type PROTOCOL_VIOLATION.",
Clients MUST ignore the value of this field.,
The Version field of a Version Negotiation packet MUST be set to 0x00000000.,
The server MUST include the value from the Source Connection ID field of the packet it receives in the Destination Connection ID field.,
"The value for Source Connection ID MUST be copied from the Destination Connection ID of the received packet, which is initially randomly selected by a client.",
"A server MUST NOT send more than one Version Negotiation packet in response to a single UDP datagram.<span class=""grey"">Iyengar &amp; Thomson   Expires 12 December 2020      [Page 106]</pre><hr class='noprint'/><!--NewPage--><pre class='newpage'><span id=""page-107"" ><span class=""grey"">Internet-Draft     QUIC Transport Protocol     June 2020 See <a href=""#section-6"">Section 6</a> for a description of the version negotiation process.<span class=""h4""><a class=""selflink"" id=""section-17.2.2"" href=""#section-17.2.2"">17.2.2</a>.",
Initial packets sent by the server MUST set the Token Length field  to zero; clients that receive an Initial packet with a non-zero  Token Length field MUST either discard the packet or generate a  connection error of type PROTOCOL_VIOLATION.,
"A client MUST NOT reset the packet number it uses for 0-RTT packets, since the keys used to protect 0-RTT packets will not change as a result of responding to a Retry packet.",
"Therefore, in determining the length of the packet number encoding for 0-RTT<span class=""grey"">Iyengar &amp; Thomson   Expires 12 December 2020      [Page 109]</pre><hr class='noprint'/><!--NewPage--><pre class='newpage'><span id=""page-110"" ><span class=""grey"">Internet-Draft     QUIC Transport Protocol     June 2020 packets, a client MUST assume that all packets up to the current packet number are in flight, starting from a packet number of 0.",
A client MUST NOT send 0-RTT packets once it starts processing 1-RTT packets from the server.,
An acknowledgment for a 1-RTT packet MUST be carried in a 1-RTT packet.,
Endpoints MUST treat receipt of Handshake packets with other frames as a connection error.,
This value MUST NOT be equal to the Destination Connection ID field of the packet sent by the client.,
A client MUST discard a Retry packet that contains a Source Connection ID field that is identical to the Destination Connection ID field of its Initial packet.,
The client MUST use the value from the Source Connection ID field of the Retry packet in the Destination Connection ID field of subsequent packets that it sends.,
"A server MUST NOT send more than one Retry packet in response to a single UDP datagram.<span class=""h5""><a class=""selflink"" id=""section-17.2.5.2"" href=""#section-17.2.5.2"">17.2.5.2</a>.",
Handling a Retry Packet A client MUST accept and process at most one Retry packet for each connection attempt.,
"After the client has received and processed an Initial or Retry packet from the server, it MUST discard any subsequent Retry packets that it receives.",
"Clients MUST discard Retry packets that have a Retry Integrity Tag that cannot be validated, see the Retry Packet Integrity section of [<a href=""#ref-QUIC-TLS"" title=""""Using Transport Layer Security (TLS) to Secure QUIC"""">QUIC-TLS</a>].",
A client MUST discard a Retry packet with a zero-length Retry Token field.,
"The client MUST NOT change the Source Connection ID because the server could include the connection ID as part of its token validation logic; see <a href=""#section-8.1.4"">Section 8.1.4</a>.",
A client MUST use the same cryptographic handshake message it includes in this packet.,
A client MUST NOT change the cryptographic handshake message it sends in response to receiving a Retry.,
"A client MUST NOT reset the packet number for any packet number space after processing a Retry packet; <a href=""#section-17.2.3"">Section 17.2.3</a> contains more information on this.",
"If the client received and processed a Retry packet, it MUST validate that the retry_source_connection_id transport parameter is present and correct; otherwise, it MUST validate that the transport parameter is absent.",
"A client MUST treat a failed validation as a connection error of type PROTOCOL_VIOLATION.<span class=""h3""><a class=""selflink"" id=""section-17.3"" href=""#section-17.3"">17.3</a>.",
Packets  containing a zero value for this bit are not valid packets in this  version and MUST be discarded.,
The value included prior to  protection MUST be set to 0.,
"An endpoint MUST treat receipt of a  packet that has a non-zero value for these bits, after removing  both packet and header protection, as a connection error of type  PROTOCOL_VIOLATION.",
A QUIC stack that chooses to support the spin bit MUST implement it as specified in this section.,
Implementations MUST allow administrators of clients and servers to disable the spin bit either globally or on a per-connection basis.,
"Even when the spin bit is not disabled by the administrator, endpoints MUST disable their use of the spin bit for a random selection of at least one in every 16 network paths, or for one in every 16 connection IDs.",
"As each endpoint disables the spin bit independently, this ensures that the spin bit signal is disabled on approximately one in eight network paths.<span class=""grey"">Iyengar &amp; Thomson   Expires 12 December 2020      [Page 115]</pre><hr class='noprint'/><!--NewPage--><pre class='newpage'><span id=""page-116"" ><span class=""grey"">Internet-Draft     QUIC Transport Protocol     June 2020 When the spin bit is disabled, endpoints MAY set the spin bit to any value, and MUST ignore any incoming value.",
"This transport parameter MUST NOT be sent  by a client, but MAY be sent by a server.",
"When a peer sets this transport parameter,  an endpoint MUST NOT use a new local address when sending to the  address that the peer used during the handshake.",
A server  that chooses a zero-length connection ID MUST NOT provide a  preferred address.,
"Similarly, a server MUST NOT include a zero-  length connection ID in this transport parameter.",
A client MUST  treat violation of these requirements as a connection error of  type TRANSPORT_PARAMETER_ERROR.,
The value of the  active_connection_id_limit parameter MUST be at least 2.,
An  endpoint that receives a value less than 2 MUST close the  connection with an error of type TRANSPORT_PARAMETER_ERROR.,
"A client MUST NOT include any server-only transport parameter: original_destination_connection_id, preferred_address, retry_source_connection_id, or stateless_reset_token.",
"A server MUST treat receipt of any of these transport parameters as a connection error of type TRANSPORT_PARAMETER_ERROR.<span class=""h2""><a class=""selflink"" id=""section-19"" href=""#section-19"">19</a>.",
"QUIC implementations MUST properly handle both types and, if they have enabled ECN for packets they send, they SHOULD use the information in the ECN section to manage their congestion state.",
"The value of the Gap field establishes the largest packet number value for the subsequent ACK Range using the following formula:  largest = previous_smallest - gap - 2 If any computed packet number is negative, an endpoint MUST generate a connection error of type FRAME_ENCODING_ERROR.<span class=""h4""><a class=""selflink"" id=""section-19.3.2"" href=""#section-19.3.2"">19.3.2</a>.",
An endpoint that receives a RESET_STREAM frame for a send-only stream MUST terminate the connection with error STREAM_STATE_ERROR.,
Receiving a STOP_SENDING frame for a locally-initiated stream that has not yet been created MUST be treated as a connection error of type STREAM_STATE_ERROR.,
An endpoint that receives a STOP_SENDING frame for a receive-only stream MUST terminate the connection with error STREAM_STATE_ERROR.,
Receipt of a frame that exceeds this limit MUST be treated as a connection error of type FRAME_ENCODING_ERROR or CRYPTO_BUFFER_EXCEEDED.,
The token MUST NOT be empty.,
An endpoint MUST treat  receipt of a NEW_TOKEN frame with an empty Token field as a  connection error of type FRAME_ENCODING_ERROR.,
Clients MUST NOT send NEW_TOKEN frames.,
"Servers MUST treat receipt of a NEW_TOKEN frame as a connection error of type PROTOCOL_VIOLATION.<span class=""h3""><a class=""selflink"" id=""section-19.8"" href=""#section-19.8"">19.8</a>.",
"Setting this bit indicates  that the frame marks the end of the stream.<span class=""grey"">Iyengar &amp; Thomson   Expires 12 December 2020      [Page 129]</pre><hr class='noprint'/><!--NewPage--><pre class='newpage'><span id=""page-130"" ><span class=""grey"">Internet-Draft     QUIC Transport Protocol     June 2020 An endpoint MUST terminate the connection with error STREAM_STATE_ERROR if it receives a STREAM frame for a locally- initiated stream that has not yet been created, or for a send-only stream.",
"Receipt of a frame that exceeds this limit MUST be treated as a connection error of type FRAME_ENCODING_ERROR or FLOW_CONTROL_ERROR.<span class=""grey"">Iyengar &amp; Thomson   Expires 12 December 2020      [Page 130]</pre><hr class='noprint'/><!--NewPage--><pre class='newpage'><span id=""page-131"" ><span class=""grey"">Internet-Draft     QUIC Transport Protocol     June 2020<span class=""h3""><a class=""selflink"" id=""section-19.9"" href=""#section-19.9"">19.9</a>.",
The sum of the largest received offsets on all streams - including streams in terminal states - MUST NOT exceed the value advertised by a receiver.,
"An endpoint MUST terminate a connection with a FLOW_CONTROL_ERROR error if it receives more data than the maximum data value that it has sent, unless this is a result of a change in the initial limits; see <a href=""#section-7.4.1"">Section 7.4.1</a>.<span class=""h3""><a class=""selflink"" id=""section-19.10"" href=""#section-19.10"">19.10</a>.",
Receiving a MAX_STREAM_DATA frame for a locally- initiated stream that has not yet been created MUST be treated as a connection error of type STREAM_STATE_ERROR.,
An endpoint that receives a MAX_STREAM_DATA frame for a receive-only stream MUST terminate the connection with error STREAM_STATE_ERROR.,
The data sent on a stream MUST NOT exceed the largest maximum stream data value advertised by the receiver.,
"An endpoint MUST terminate a connection with a FLOW_CONTROL_ERROR error if it receives more data than the largest maximum stream data that it has sent for the affected stream, unless this is a result of a change in the initial limits; see <a href=""#section-7.4.1"">Section 7.4.1</a>.<span class=""h3""><a class=""selflink"" id=""section-19.11"" href=""#section-19.11"">19.11</a>.",
Receipt of a frame that  permits opening of a stream larger than this limit MUST be treated  as a FRAME_ENCODING_ERROR.,
MAX_STREAMS frames which do not increase the stream limit MUST be ignored.,
An endpoint MUST NOT open more streams than permitted by the current stream limit set by its peer.,
An endpoint MUST terminate a connection with a STREAM_LIMIT_ERROR error if a peer opens more streams than was permitted.,
An endpoint that receives a STREAM_DATA_BLOCKED frame for a send-only stream MUST terminate the connection with error STREAM_STATE_ERROR.,
"Receipt of a frame that encodes a larger  stream ID MUST be treated as a STREAM_LIMIT_ERROR or a  FRAME_ENCODING_ERROR.<span class=""h3""><a class=""selflink"" id=""section-19.15"" href=""#section-19.15"">19.15</a>.",
Values less than 1 and greater than 20 are invalid  and MUST be treated as a connection error of type  FRAME_ENCODING_ERROR.,
"Stateless Reset Token:  A 128-bit value that will be used for a  stateless reset when the associated connection ID is used; see  <a href=""#section-10.4"">Section 10.4</a>.<span class=""grey"">Iyengar &amp; Thomson   Expires 12 December 2020      [Page 135]</pre><hr class='noprint'/><!--NewPage--><pre class='newpage'><span id=""page-136"" ><span class=""grey"">Internet-Draft     QUIC Transport Protocol     June 2020 An endpoint MUST NOT send this frame if it currently requires that its peer send packets with a zero-length Destination Connection ID.",
An endpoint that is sending packets with a zero-length Destination Connection ID MUST treat receipt of a NEW_CONNECTION_ID frame as a connection error of type PROTOCOL_VIOLATION.,
Receipt of the same frame multiple times MUST NOT be treated as a connection error.,
The Retire Prior To field MUST be less than or equal to the Sequence Number field.,
Receiving a value greater than the Sequence Number MUST be treated as a connection error of type FRAME_ENCODING_ERROR.,
A receiver MUST ignore any Retire Prior To fields that do not increase the largest received Retire Prior To value.,
"An endpoint that receives a NEW_CONNECTION_ID frame with a sequence number smaller than the Retire Prior To field of a previously received NEW_CONNECTION_ID frame MUST send a corresponding RETIRE_CONNECTION_ID frame that retires the newly received connection ID, unless it has already done so for that sequence number.<span class=""h3""><a class=""selflink"" id=""section-19.16"" href=""#section-19.16"">19.16</a>.",
Receipt of a RETIRE_CONNECTION_ID frame containing a sequence number greater than any previously sent to the peer MUST be treated as a connection error of type PROTOCOL_VIOLATION.,
The sequence number specified in a RETIRE_CONNECTION_ID frame MUST NOT refer to the Destination Connection ID field of the packet in which the frame is contained.,
"An endpoint that provides a zero- length connection ID MUST treat receipt of a RETIRE_CONNECTION_ID frame as a connection error of type PROTOCOL_VIOLATION.<span class=""h3""><a class=""selflink"" id=""section-19.17"" href=""#section-19.17"">19.17</a>.",
"The recipient of this frame MUST generate a PATH_RESPONSE frame (<a href=""#section-19.18"">Section 19.18</a>) containing the same Data.<span class=""h3""><a class=""selflink"" id=""section-19.18"" href=""#section-19.18"">19.18</a>.",
Servers MUST NOT send a HANDSHAKE_DONE frame before completing the handshake.,
"A server MUST treat receipt of a HANDSHAKE_DONE frame as a connection error of type PROTOCOL_VIOLATION.<span class=""h3""><a class=""selflink"" id=""section-19.21"" href=""#section-19.21"">19.21</a>.",
An extension to QUIC that wishes to use a new type of frame MUST first ensure that a peer is able to understand the frame.,
Extension frames MUST be congestion controlled and MUST cause an ACK frame to be sent.,
"To defend against this style of denial service, endpoints that share a static key for stateless reset (see <a href=""#section-10.4.2"">Section 10.4.2</a>) MUST be arranged so that packets with a given connection ID always arrive at an instance that has connection state, unless that connection is no longer active.",
"Future versions of QUIC that use Version Negotiation packets MUST define a mechanism that is robust against version downgrade attacks.<span class=""h3""><a class=""selflink"" id=""section-21.11"" href=""#section-21.11"">21.11</a>.",
"Use of the first codepoint in a range is intended for use by specifications that are developed through the standards process [<a href=""#ref-STD"" title=""""The Internet Standards Process -- Revision 3"""">STD</a>] and its allocation MUST be negotiated with IANA before use.<span class=""grey"">Iyengar &amp; Thomson   Expires 12 December 2020      [Page 155]</pre><hr class='noprint'/><!--NewPage--><pre class='newpage'><span id=""page-156"" ><span class=""grey"">Internet-Draft     QUIC Transport Protocol     June 2020 For codepoints that are encoded in variable-length integers (<a href=""#section-16"">Section 16</a>), such as frame types, codepoints that encode to four or eight bytes (that is, values 2^14 and above) SHOULD be used unless the usage is especially sensitive to having a longer encoding.",
"IANA MUST allocate the selected codepoint unless that codepoint is already assigned or the codepoint is the first unallocated codepoint in the registry.<span class=""h4""><a class=""selflink"" id=""section-22.1.3"" href=""#section-22.1.3"">22.1.3</a>.",
A request to remove a codepoint MUST be reviewed by the designated expert(s).,
The expert(s) MUST attempt to determine whether the codepoint is still in use.,
"If any use of the codepoints is identified by this search or a request to update the registration is made, the codepoint MUST NOT be reclaimed.",
All registrations made by Standards Track publications MUST be permanent.,
"In addition to the fields in <a href=""#section-22.1.1"">Section 22.1.1</a>, permanent registrations in this registry MUST include the following fields: Parameter Name:  A short mnemonic for the parameter.",
"The initial contents of this registry are shown in Table 6.<span class=""grey"">Iyengar &amp; Thomson   Expires 12 December 2020      [Page 157]</pre><hr class='noprint'/><!--NewPage--><pre class='newpage'><span id=""page-158"" ><span class=""grey"">Internet-Draft     QUIC Transport Protocol     June 2020  +-------+-------------------------------------+---------------+  | Value | Parameter Name        | Specification |  +=======+=====================================+===============+  | 0x00  | original_destination_connection_id  | <a href=""#section-18.2"">Section 18.2</a>  |  +-------+-------------------------------------+---------------+  | 0x01  | max_idle_timeout        | <a href=""#section-18.2"">Section 18.2</a>  |  +-------+-------------------------------------+---------------+  | 0x02  | stateless_reset_token     | <a href=""#section-18.2"">Section 18.2</a>  |  +-------+-------------------------------------+---------------+  | 0x03  | max_udp_payload_size      | <a href=""#section-18.2"">Section 18.2</a>  |  +-------+-------------------------------------+---------------+  | 0x04  | initial_max_data        | <a href=""#section-18.2"">Section 18.2</a>  |  +-------+-------------------------------------+---------------+  | 0x05  | initial_max_stream_data_bidi_local  | <a href=""#section-18.2"">Section 18.2</a>  |  +-------+-------------------------------------+---------------+  | 0x06  | initial_max_stream_data_bidi_remote | <a href=""#section-18.2"">Section 18.2</a>  |  +-------+-------------------------------------+---------------+  | 0x07  | initial_max_stream_data_uni   | <a href=""#section-18.2"">Section 18.2</a>  |  +-------+-------------------------------------+---------------+  | 0x08  | initial_max_streams_bidi    | <a href=""#section-18.2"">Section 18.2</a>  |  +-------+-------------------------------------+---------------+  | 0x09  | initial_max_streams_uni     | <a href=""#section-18.2"">Section 18.2</a>  |  +-------+-------------------------------------+---------------+  | 0x0a  | ack_delay_exponent      | <a href=""#section-18.2"">Section 18.2</a>  |  +-------+-------------------------------------+---------------+  | 0x0b  | max_ack_delay         | <a href=""#section-18.2"">Section 18.2</a>  |  +-------+-------------------------------------+---------------+  | 0x0c  | disable_active_migration    | <a href=""#section-18.2"">Section 18.2</a>  |  +-------+-------------------------------------+---------------+  | 0x0d  | preferred_address       | <a href=""#section-18.2"">Section 18.2</a>  |  +-------+-------------------------------------+---------------+  | 0x0e  | active_connection_id_limit    | <a href=""#section-18.2"">Section 18.2</a>  |  +-------+-------------------------------------+---------------+  | 0x0f  | initial_source_connection_id    | <a href=""#section-18.2"">Section 18.2</a>  |  +-------+-------------------------------------+---------------+  | 0x10  | retry_source_connection_id    | <a href=""#section-18.2"">Section 18.2</a>  |  +-------+-------------------------------------+---------------+     Table 6: Initial QUIC Transport Parameters Entries Additionally, each value of the format ""31 * N + 27"" for integer values of N (that is, 27, 58, 89, ...) are reserved and MUST NOT be assigned by IANA.<span class=""h3""><a class=""selflink"" id=""section-22.3"" href=""#section-22.3"">22.3</a>.",
"In addition to the fields in <a href=""#section-22.1.1"">Section 22.1.1</a>, permanent registrations in this registry MUST include the following fields: Frame Name:  A short mnemonic for the frame type.",
"In addition to the fields in <a href=""#section-22.1.1"">Section 22.1.1</a>, permanent registrations in this registry MUST include the following fields: Code:  A short mnemonic for the parameter.",