ENUM
absin {VALID, INV}
ENUM
abssut {CURRENT, NEXT, ZERO, FRESH}
ENUM
abslearner {CURRENT, NEXT, ZERO, FRESH}

STATE
int learnerSeqProposed = -3;
int sutSeq = -3;
int learnerSeq = -3;
int lastSeqPlusDataReceived = -3;
int lastAckReceived = -3;

MAP incomingResponse (flags flagsIn, int concSeqIn, int concAckIn, int concDataIn
						-> abssut absSeqIn, abslearner absAckIn)
if (concSeqIn == sutSeq+1) {
	absSeqIn = abssut.NEXT;
} else { if (concSeqIn == sutSeq) {
	absSeqIn = abssut.CURRENT;
} else { if (concSeqIn == 0) {
	absSeqIn = abssut.ZERO;
} else {
	absSeqIn = abssut.FRESH;
}}}
if ((concAckIn == learnerSeq+1) | (concAckIn == learnerSeqProposed+1)) {
	absAckIn = abslearner.NEXT;
} else { if (concAckIn == learnerSeq) {
	absAckIn = abslearner.CURRENT;
} else { if (concAckIn == 0) {
	absAckIn = abslearner.ZERO;
} else {
	absAckIn = abslearner.FRESH;
}}}
UPDATE
if ((flagsIn has $R) | ((learnerSeqProposed != -3) & (concAckIn != learnerSeqProposed+1))) {
	// upon reset, or if a fresh seq from the learner is not acknowledged
	sutSeq = -3;
	learnerSeq = -3;
} else { if ((learnerSeqProposed != -3) | (concSeqIn == sutSeq+1)) {
	// if a fresh seq from the learner is acknowledged, or if the sequence number is valid
	if ((flagsIn has $S) | (flagsIn has $F)) {
		sutSeq = concSeqIn;
	} else { if (flagsIn has $P) {
		sutSeq = sutSeq + concDataIn;
	} else {
		sutSeq = sutSeq;
	}}
	learnerSeq = concAckIn;
} else {if (flagsIn has $S) {
	// fresh sequence number
	sutSeq = concSeqIn;
	if (concAckIn == 0) {
		learnerSeq = learnerSeq;
	} else {
		learnerSeq = concAckIn;
	}
} else {
	sutSeq = sutSeq;
	learnerSeq = learnerSeq;
}}}
learnerSeqProposed = -3;
if (flagsIn has $S | flagsIn has $F) {
	lastSeqPlusDataReceived = concSeqIn + concDataIn + 1;
} else {
	lastSeqPlusDataReceived = concSeqIn + concDataIn;
}
lastAckReceived = concAckIn;

MAP outgoingRequest (int concSeqOut, int concAckOut, flags flagsOut, int concDataOut
						-> absin absSeqOut, absin absAckOut, flags flagsOut2, int absDataOut)
flagsOut2 = flagsOut;
absDataOut = concDataOut;
if (((learnerSeq == -3)
	| (learnerSeq == concSeqOut))
	| ((flagsOut has $R) & (!(flagsOut has $A)) & (lastAckReceived != 0) & (learnerSeq == -3) & (concSeqOut == lastAckReceived))
	) {
	absSeqOut = absin.VALID;
} else {
	absSeqOut = absin.INV;
}
if ((((sutSeq == -3) & (concAckOut == 0)) | ((sutSeq != -3) & (concAckOut == sutSeq+1)))
//	| ((lastAckReceived == 0) & (concAckOut == lastSeqPlusDataReceived) & (flagsOut has $R) & (flagsOut has $A))
	| (!(flagsOut has $A))
	) {
	absAckOut = absin.VALID;
} else {
	absAckOut = absin.INV;
}
UPDATE
if ((flagsOut has $R) & (absAckOut == absin.VALID) & (absSeqOut == absin.VALID)) {
	learnerSeqProposed = -3;
	sutSeq = -3;
	learnerSeq = -3;
} else {
	if (learnerSeq == -3) {
		learnerSeqProposed = concSeqOut;
	} else {
		learnerSeqProposed = learnerSeqProposed;
	}
	sutSeq = sutSeq;
	learnerSeq = learnerSeq;
}
lastSeqPlusDataReceived = lastSeqPlusDataReceived;
lastAckReceived = lastAckReceived;

MAP incomingTimeout (int tmp -> int tmp2)
tmp2 = tmp;
UPDATE
learnerSeqProposed = -3;
sutSeq = sutSeq;
learnerSeq = learnerSeq;
lastSeqPlusDataReceived = lastSeqPlusDataReceived;
lastAckReceived = lastAckReceived;
